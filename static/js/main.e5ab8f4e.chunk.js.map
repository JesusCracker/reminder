{"version":3,"sources":["store/configureStore.js","constants/index.js","actions/index.js","components/App.js","index.js","reducers/reminder.js","reducers/index.js","store/configureStore.prod.js"],"names":["module","exports","require","ADD_REMINDER","DELETE_REMINDER","CLEAR_REMINDERS","addReminder","text","dueDate","type","types","deleteReminder","id","clearReminders","App","prop","state","this","props","reminders","className","map","key","moment","Date","fromNow","onClick","placeholder","onChange","event","setState","target","value","renderReminders","Component","connect","reminder","dispatch","bindActionCreators","store","configureStore","ReactDOM","render","document","getElementById","action","Math","random","read_cookie","reminderData","bake_cookie","filter","delete_cookie","rootReducer","combineReducers","preloadState","createStore","applyMiddleware","thunk","promise"],"mappings":"4FACIA,EAAOC,QAAQC,EAAQ,K,wFCD3B,sGAAO,IAAMC,EAAa,eACbC,EAAgB,kBAChBC,EAAgB,mB,yICCfC,G,MAAY,SAACC,EAAKC,GAC5B,MAAM,CACFC,KAAKC,IACLH,OACAC,aAKKG,EAAe,SAACC,GACzB,MAAM,CACFH,KAAKC,IACLE,OAIKC,EAAe,WACxB,MAAM,CACFJ,KAAKC,M,wBCbPI,E,YACF,WAAYC,GAAO,IAAD,8BACd,4CAAMA,KACDC,MAAQ,CACTT,KAAM,GACNC,QAAQ,IAJE,E,2EASdS,KAAKC,MAAMZ,YAAYW,KAAKD,MAAMT,KAAKU,KAAKD,MAAMR,W,qCAGvCI,GACXK,KAAKC,MAAMP,eAAeC,K,uCAI1BK,KAAKC,MAAML,mB,wCAGI,IAAD,OACPM,EAAWF,KAAKC,MAAhBC,UAEP,OACI,wBAAIC,UAAU,4BAEND,EAAUE,KAAI,SAAAF,GACV,OACI,wBAAIC,UAAU,kBAAkBE,IAAKH,EAAUP,IAC3C,yBAAKQ,UAAU,aACX,6BAAMD,EAAUZ,MAChB,6BAAMgB,IAAO,IAAIC,KAAKL,EAAUX,UAAUiB,WAC1C,yBAAKL,UAAU,0BAA0BM,QAAS,kBAAI,EAAKf,eAAeQ,EAAUP,MAApF,kB,+BAoBtB,IAAD,OACL,OACI,yBAAKQ,UAAU,OACX,yBAAKA,UAAU,SAAf,gBAEA,yBAAKA,UAAU,eACX,yBAAKA,UAAU,cACX,2BAAOX,KAAK,OAAOW,UAAU,oBAAoBO,YAAY,YAAYC,SAAU,SAACC,GAChF,EAAKC,SAAS,CAACvB,KAAMsB,EAAME,OAAOC,WAEtC,2BAAOvB,KAAK,iBAAiBW,UAAU,eAAeQ,SAAU,SAACC,GAC7D,EAAKC,SAAS,CAACtB,QAAQqB,EAAME,OAAOC,WACxC,4BAAQN,QAAS,kBAAM,EAAKpB,eAAec,UAAU,mBAArD,kBAGPH,KAAKgB,kBACN,yBAAKP,QAAS,kBAAI,EAAKb,kBAAkBO,UAAU,kBAAnD,wB,GArEEc,aA4FHC,eAXS,SAACnB,GAErB,MAAO,CACHG,UAAWH,EAAMoB,aAIE,SAACC,GACxB,OAAOC,YAAmB,CAAChC,cAAYK,iBAAeE,kBAAkBwB,KAG7DF,CAA8CrB,G,QC7FvDyB,E,MAAMC,KAEZC,IAASC,OACL,kBAAC,IAAD,CAAUH,MAAOA,GACb,kBAAC,EAAD,OAEJI,SAASC,eAAe,U,wECVtBzB,EAAY,SAAC0B,GAGf,MAAO,CACHtC,KAHqBsC,EAAlBtC,KAIHC,QAJqBqC,EAAXrC,QAKVI,GAAIkC,KAAKC,WAiCFX,EA7BE,WAA2D,IAA1DpB,EAAyD,uDAAlDgC,sBAAY,iBAAiB,GAAKH,EAAgB,uDAAP,GAC5DI,EAAe,GAEnB,OAAQJ,EAAOpC,MACX,KAAKC,IAOD,OANAuC,EAAY,sBACLjC,GADK,CAERG,EAAU0B,KAEdK,sBAAY,eAAeD,GAEpBA,EACX,KAAKvC,IAGD,OAFAuC,EAAejC,EAAMmC,QAAO,SAAAf,GAAQ,OAAIA,EAASxB,KAAOiC,EAAOjC,MAC/DsC,sBAAY,eAAeD,GACpBA,EACX,KAAKvC,IAID,OAHAuC,EAAe,GACfG,wBAAc,gBAEPH,EAEX,QACI,OAAOjC,IC9BJqC,EAHKC,YAAgB,CAChClB,a,gBCUWI,UATO,SAACe,GAMnB,OALYC,YACRH,EACAE,EACAE,YAAiBC,IAAQC,S","file":"static/js/main.e5ab8f4e.chunk.js","sourcesContent":["if(process.env.NODE_ENV==='production'){\r\n    module.exports=require('./configureStore.prod')\r\n}else{\r\n    module.exports=require('./configureStore.dev');\r\n}\r\n","export const ADD_REMINDER='ADD_REMINDER';\r\nexport const DELETE_REMINDER='DELETE_REMINDER';\r\nexport const CLEAR_REMINDERS='CLEAR_REMINDERS';","import * as types from '../constants'\r\nimport axios from 'axios'\r\n\r\nexport const  addReminder=(text,dueDate)=>{\r\n    return{\r\n        type:types.ADD_REMINDER,\r\n        text,\r\n        dueDate,\r\n\r\n    }\r\n};\r\n\r\nexport const deleteReminder=(id)=>{\r\n    return{\r\n        type:types.DELETE_REMINDER,\r\n        id\r\n    }\r\n}\r\n\r\nexport const clearReminders=()=>{\r\n    return{\r\n        type:types.CLEAR_REMINDERS,\r\n    }\r\n}","import React , { Component } from 'react';\nimport { connect } from 'react-redux'\nimport { addReminder ,deleteReminder,clearReminders} from '../actions'\nimport { bindActionCreators } from \"redux\";\n\nimport propTypes from 'prop-types'\nimport moment from \"moment\";\n\nclass App extends Component {\n    constructor(prop) {\n        super(prop)\n        this.state = {\n            text: '',\n            dueDate:''\n        }\n    }\n\n    addReminder() {\n        this.props.addReminder(this.state.text,this.state.dueDate);\n    }\n\n    deleteReminder(id){\n        this.props.deleteReminder(id);\n    }\n\n    clearReminders(){\n        this.props.clearReminders();\n    }\n\n    renderReminders() {\n        const {reminders}=this.props;\n\n        return (\n            <ul className='list-group col-sm-8 mr-2'>\n                {\n                    reminders.map(reminders=>{\n                        return(\n                            <li className='list-group-item' key={reminders.id}>\n                                <div className='list-item'>\n                                    <div>{reminders.text}</div>\n                                    <div>{moment(new Date(reminders.dueDate)).fromNow()}</div>\n                                    <div className='list-item delete-button' onClick={()=>this.deleteReminder(reminders.id)}>&#x2715;</div>\n                                </div>\n                            </li>\n                        )\n\n                    })\n                }\n                {/* {reminders.map((item,index)=>{\n                    return (<li className='list-group-item' key={index}>\n                        <div className='list-item'>\n                            <div>{item.text}</div>\n                            <div>time</div>\n                        </div>\n                    </li>)\n                })}*/}\n\n            </ul>\n        )\n    }\n\n    render() {\n        return (\n            <div className=\"App\">\n                <div className='title'>Reminder Pro</div>\n\n                <div className='form-inline'>\n                    <div className='form-group'>\n                        <input type=\"text\" className='form-control mr-2' placeholder='I have...' onChange={(event) => {\n                            this.setState({text: event.target.value})\n                        }}/>\n                        <input type=\"datetime-local\" className='form-control' onChange={(event)=>{\n                            this.setState({dueDate:event.target.value})}}/>\n                        <button onClick={() => this.addReminder()} className='btn btn-success'>Add Reminder</button>\n                    </div>\n                </div>\n                {this.renderReminders()}\n                <div onClick={()=>this.clearReminders()} className='btn btn-danger'>CLEAR ALL ITEMS</div>\n            </div>\n\n        );\n    }\n}\nApp.propTypes={\n    reminders: propTypes.array.isRequired,\n    addReminder:propTypes.func.isRequired,\n    deleteReminder:propTypes.func.isRequired\n}\n\nconst mapStateToProps = (state) => {\n\n    return {\n        reminders: state.reminder\n    }\n}\n\nconst mapDispatchToProps = (dispatch) => {\n    return bindActionCreators({addReminder,deleteReminder,clearReminders} , dispatch);\n}\n\nexport default connect(mapStateToProps , mapDispatchToProps)(App);","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App';\nimport { Provider } from 'react-redux'\nimport configureStore from \"./store/configureStore\";\n\nconst store=configureStore();\n\nReactDOM.render(\n    <Provider store={store}>\n        <App/>\n    </Provider> ,\n    document.getElementById('root'));\n","import * as types from '../constants'\r\nimport { bake_cookie , read_cookie , delete_cookie } from 'sfcookies'\r\n\r\nconst reminders = (action) => {\r\n    const {text , dueDate} = action;\r\n\r\n    return {\r\n        text ,\r\n        dueDate ,\r\n        id: Math.random()\r\n    }\r\n}\r\n\r\nconst reminder = (state =read_cookie('reminderData')||[] , action = {}) => {\r\n    let reminderData = '';\r\n\r\n    switch (action.type) {\r\n        case types.ADD_REMINDER:\r\n            reminderData = [\r\n                ...state ,\r\n                reminders(action)\r\n            ];\r\n            bake_cookie(\"reminderData\",reminderData);\r\n\r\n            return reminderData\r\n        case types.DELETE_REMINDER:\r\n            reminderData = state.filter(reminder => reminder.id !== action.id);\r\n            bake_cookie(\"reminderData\",reminderData);\r\n            return reminderData;\r\n        case types.CLEAR_REMINDERS:\r\n            reminderData = [];\r\n            delete_cookie('reminderData');\r\n\r\n            return reminderData;\r\n\r\n        default:\r\n            return state;\r\n    }\r\n\r\n\r\n}\r\n\r\nexport default reminder;","import { combineReducers } from \"redux\";\r\nimport reminder from \"./reminder\";\r\n\r\nconst rootReducer = combineReducers({\r\n    reminder ,\r\n})\r\nexport default rootReducer;","import { applyMiddleware , createStore } from \"redux\";\r\nimport rootReducer from \"../reducers\";\r\nimport thunk from 'redux-thunk';\r\nimport promise from \"redux-promise-middleware\";\r\n\r\nconst  configureStore=(preloadState)=>{\r\n    const store=createStore(\r\n        rootReducer ,\r\n        preloadState ,\r\n        applyMiddleware( thunk , promise));\r\n\r\n    return store;\r\n};\r\n\r\nexport default configureStore;"],"sourceRoot":""}